// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "demo": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/cratermoon/goaelog/design
// --out=$(GOPATH)/src/github.com/cratermoon/goaelog
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// DatetimeController is the controller interface for the Datetime actions.
type DatetimeController interface {
	goa.Muxer
	Time(*TimeDatetimeContext) error
}

// MountDatetimeController "mounts" a Datetime resource controller on the given service.
func MountDatetimeController(service *goa.Service, ctrl DatetimeController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewTimeDatetimeContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Time(rctx)
	}
	service.Mux.Handle("GET", "/time/:tz/:long", ctrl.MuxHandler("time", h, nil))
	service.LogInfo("mount", "ctrl", "Datetime", "action", "Time", "route", "GET /time/:tz/:long")
}

// UUIDController is the controller interface for the UUID actions.
type UUIDController interface {
	goa.Muxer
	Generate(*GenerateUUIDContext) error
}

// MountUUIDController "mounts" a UUID resource controller on the given service.
func MountUUIDController(service *goa.Service, ctrl UUIDController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGenerateUUIDContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Generate(rctx)
	}
	service.Mux.Handle("GET", "/uuid", ctrl.MuxHandler("generate", h, nil))
	service.LogInfo("mount", "ctrl", "UUID", "action", "Generate", "route", "GET /uuid")
}
